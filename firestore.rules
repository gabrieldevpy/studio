rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requester is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user document
      // Users can read and update their own document
      allow read: if isAdmin() || request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      // No one can create or delete user docs directly, this is handled server-side/on signup
      allow create, delete: if false;
    }

    // Rules for the 'routes' collection
    match /routes/{routeId} {
      // Any authenticated user can create a route
      allow create: if request.auth != null;
      // Admins can read any route
      // Owners can read, update, and delete their own routes
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Rules for the 'logs' collection
    match /logs/{logId} {
      // Anyone can create a log entry (for the unauthenticated cloaking route)
      allow create: if true;
      // Admins can read any log
      // Owners can read logs associated with their user ID
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      // Logs are immutable
      allow update, delete: if false;
    }

    // Admins can get counts from collections
    match /{document=**} {
      allow list: if isAdmin();
    }
  }
}
